name: Deploy Zola to Cloudflare Pages
run-name: "Zola → CF Pages • ${{ github.ref_name }} #${{ github.run_number }}"

on:
  push:
    branches: [ main ]
  pull_request:

concurrency:
  group: pages-${{ github.ref }}
  cancel-in-progress: true

env:
  CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
  CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
  DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
  CF_PAGES_PROJECT: etak64n-blog
  BUILD_DIR: public

jobs:
  # --- 1) Build ---
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: read
    timeout-minutes: 15
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install Zola
        uses: taiki-e/install-action@v2
        with:
          tool: zola@latest

      - name: Build
        run: zola build

      - name: Upload artifact (site)
        uses: actions/upload-artifact@v4
        with:
          name: zola-public
          path: ${{ env.BUILD_DIR }}
          if-no-files-found: error
          retention-days: 1

  # --- 2) Deploy ---
  deploy:
    needs: build
    if: ${{ needs.build.result == 'success' && (github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false)) }}
    runs-on: ubuntu-latest
    permissions:
      contents: read
      deployments: write
    timeout-minutes: 10
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: zola-public
          path: ${{ env.BUILD_DIR }}

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken:  ${{ env.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ env.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy ${{ env.BUILD_DIR }} --project-name=${{ env.CF_PAGES_PROJECT }}
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

  # --- 3) Notify（Embed 1回通知・リンク強化） ---
  notify:
    needs: [build, deploy]
    if: ${{ always() && (github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false)) }}
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Verify DISCORD_WEBHOOK_URL is set
        run: |
          set -euo pipefail
          if [ -z "${DISCORD_WEBHOOK_URL:-}" ] || [ -z "$(printf '%s' "$DISCORD_WEBHOOK_URL" | tr -d '[:space:]')" ]; then
            echo "::error::DISCORD_WEBHOOK_URL secret is not set."
            exit 1
          fi

      - name: Notify Discord (embed, strict + debuggable)
        env:
          BUILD_RES: ${{ needs.build.result }}
          DEPLOY_RES: ${{ needs.deploy.result }}
          EVENT_NAME: ${{ github.event_name }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          HEAD_MSG: ${{ github.event.head_commit.message }}
          REF_NAME: ${{ github.ref_name }}
          HEAD_REF: ${{ github.head_ref }}
          ACTOR: ${{ github.actor }}
        run: |
          set -euo pipefail
          BUILD="${BUILD_RES:-unknown}"
          DEPLOY="${DEPLOY_RES:-skipped}"
          EVENT="${EVENT_NAME:-push}"

          # 表示テキスト（わかりやすく）
          [ "$BUILD"  = "success" ] && BUILD_TXT="✅ **Succeeded**" \
            || BUILD_TXT=$([ "$BUILD" = "failure" ] && echo "❌ **Failed**" || echo "ℹ️ ${BUILD}")
          if [ "$DEPLOY" = "success" ]; then
            DEPLOY_TXT="🚀 **Deployed**"
          elif [ "$DEPLOY" = "failure" ]; then
            DEPLOY_TXT="⚠️ **Failed**"
          else
            REASON=""
            if [ "$EVENT" = "pull_request" ] && [ "${{ github.event.pull_request.head.repo.fork }}" = "true" ]; then
              REASON="(forked PR / no secrets)"
            elif [ "$BUILD" != "success" ]; then
              REASON="(build not successful)"
            fi
            DEPLOY_TXT="⏭️ **Skipped** ${REASON}"
          fi

          # 色
          if [ "$BUILD" = "failure" ]; then COLOR=15158332
          elif [ "$DEPLOY" = "failure" ]; then COLOR=15105570
          elif [ "$DEPLOY" = "skipped" ]; then COLOR=16705372
          else COLOR=3066993
          fi

          SUBJECT="${HEAD_MSG:-Workflow summary}"
          [ "$EVENT" = "pull_request" ] && [ -n "${PR_TITLE:-}" ] && SUBJECT="$PR_TITLE"
          SUBJECT=$(printf '%s' "$SUBJECT" | tr -d '\r' | head -n1 | cut -c1-120)

          BRANCH="${REF_NAME}"; [ "$EVENT" = "pull_request" ] && [ -n "${HEAD_REF:-}" ] && BRANCH="$HEAD_REF"
          SHORT_SHA="${GITHUB_SHA::7}"

          RUN_URL="https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          COMMIT_URL="https://github.com/${GITHUB_REPOSITORY}/commit/${GITHUB_SHA}"
          REPO_URL="https://github.com/${GITHUB_REPOSITORY}"
          BRANCH_URL="https://github.com/${GITHUB_REPOSITORY}/tree/${BRANCH}"
          ACTOR_URL="https://github.com/${ACTOR}"
          PROJECT_URL="https://${CF_PAGES_PROJECT}.pages.dev"
          TITLE="Zola → CF Pages • ${BRANCH} #${GITHUB_RUN_NUMBER}"
          NOW_UTC="$(date -u +%Y-%m-%dT%H:%M:%SZ)"

          # JSON を jq で安全に生成
          jq -n \
            --arg title "$TITLE" --arg run_url "$RUN_URL" --arg subject "$SUBJECT" --arg color "$COLOR" --arg now "$NOW_UTC" \
            --arg repo "$GITHUB_REPOSITORY" --arg repo_url "$REPO_URL" \
            --arg build "$BUILD_TXT" --arg deploy "$DEPLOY_TXT" \
            --arg branch "$BRANCH" --arg branch_url "$BRANCH_URL" \
            --arg short_sha "$SHORT_SHA" --arg commit_url "$COMMIT_URL" \
            --arg actor "$ACTOR" --arg actor_url "$ACTOR_URL" \
            --arg project "$CF_PAGES_PROJECT" --arg project_url "$PROJECT_URL" \
            --arg run_number "$GITHUB_RUN_NUMBER" \
            '{
              username: "GitHub Actions",
              avatar_url: "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
              allowed_mentions: {parse: []},
              embeds: [
                {
                  title: $title, url: $run_url, description: $subject,
                  color: ($color|tonumber), timestamp: $now,
                  author: {name: $repo, url: $repo_url},
                  thumbnail: {url: "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png"},
                  fields: [
                    {name:"Build",   value:$build,  inline:true},
                    {name:"Deploy",  value:$deploy, inline:true},
                    {name:"Branch",  value:("[`"+$branch+"`]("+$branch_url+")"), inline:true},
                    {name:"Commit",  value:("[`"+$short_sha+"`]("+$commit_url+")"), inline:true},
                    {name:"Actor",   value:("["+ $actor +"]("+$actor_url+")"), inline:true},
                    {name:"Project", value:("[`"+$project+"`]("+$project_url+")"), inline:true}
                  ],
                  footer:{text: ("Run #"+$run_number)}
                }
              ],
              components: [
                {type:1, components:[
                  {type:2, style:5, label:"Open Run",   url:$run_url},
                  {type:2, style:5, label:"View Commit",url:$commit_url},
                  {type:2, style:5, label:"Repository", url:$repo_url},
                  {type:2, style:5, label:"View Site",  url:$project_url}
                ]}
              ]
            }' > payload.json

          # 送信（非2xxならエラーにして理由を表示）
          code=$(curl -sS -o resp.json -w "%{http_code}" \
                   -H 'Content-Type: application/json' \
                   -d @payload.json "$DISCORD_WEBHOOK_URL")
          echo "Discord HTTP: $code"
          if [ "$code" != "200" ] && [ "$code" != "204" ]; then
            echo "::error::Discord webhook error (HTTP $code)"
            echo "Response body:"; cat resp.json || true
            echo "Payload preview:"; head -c 500 payload.json; echo
            exit 1
          fi
          echo "Discord OK ✅"
