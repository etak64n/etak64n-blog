name: Deploy Zola to Cloudflare Pages
run-name: "Zola ‚Üí CF Pages ‚Ä¢ ${{ github.ref_name }} #${{ github.run_number }}"

on:
  push:
    branches: [ main ]
  pull_request:

concurrency:
  group: pages-${{ github.ref }}
  cancel-in-progress: true

# Secrets ÂèÇÁÖß„ÇíÈõÜÁ¥Ñ
env:
  CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
  CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
  DISCORD_WEBHOOK_URL: ${{ secrets.DISCORD_WEBHOOK_URL }}
  CF_PAGES_PROJECT: etak64n-blog
  BUILD_DIR: public

jobs:
  # --- 1) Build ---
  build:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Install Zola
        uses: taiki-e/install-action@v2
        with:
          tool: zola@latest

      - name: Build
        run: zola build

      - name: Upload artifact (site)
        uses: actions/upload-artifact@v4
        with:
          name: zola-public
          path: ${{ env.BUILD_DIR }}
          if-no-files-found: error
          retention-days: 1

  # --- 2) Deploy ---
  deploy:
    needs: build
    if: ${{ needs.build.result == 'success' && (github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false)) }}
    runs-on: ubuntu-latest
    timeout-minutes: 10
    permissions:
      contents: read
      deployments: write
    steps:
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          name: zola-public
          path: ${{ env.BUILD_DIR }}

      - name: Deploy to Cloudflare Pages
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken:  ${{ env.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ env.CLOUDFLARE_ACCOUNT_ID }}
          command: pages deploy ${{ env.BUILD_DIR }} --project-name=${{ env.CF_PAGES_PROJECT }}
          gitHubToken: ${{ secrets.GITHUB_TOKEN }}

  # --- 3) NotifyÔºàEmbed 1ÂõûÈÄöÁü•Ôºâ ---
  notify:
    needs: [build, deploy]
    if: ${{ always() && (github.event_name == 'push' || (github.event_name == 'pull_request' && github.event.pull_request.head.repo.fork == false)) }}
    runs-on: ubuntu-latest
    timeout-minutes: 5
    permissions:
      contents: read
    steps:
      # Webhook Êú™Ë®≠ÂÆö„Å™„Çâ fail
      - name: Verify DISCORD_WEBHOOK_URL is set
        run: |
          set -euo pipefail
          if [ -z "${DISCORD_WEBHOOK_URL:-}" ] || [ -z "$(printf '%s' "$DISCORD_WEBHOOK_URL" | tr -d '[:space:]')" ]; then
            echo "::error::DISCORD_WEBHOOK_URL secret is not set. Configure it in Settings ‚Üí Secrets and variables ‚Üí Actions."
            exit 1
          fi

      - name: Notify Discord (Embed summary)
        env:
          BUILD_RES: ${{ needs.build.result }}
          DEPLOY_RES: ${{ needs.deploy.result }}
          EVENT_NAME: ${{ github.event_name }}
          PR_TITLE: ${{ github.event.pull_request.title }}
          HEAD_MSG: ${{ github.event.head_commit.message }}
          REF_NAME: ${{ github.ref_name }}
          HEAD_REF: ${{ github.head_ref }}
        run: |
          set -euo pipefail

          BUILD="${BUILD_RES:-unknown}"
          DEPLOY="${DEPLOY_RES:-skipped}"

          # Ë°®Á§∫„ÉÜ„Ç≠„Çπ„Éà
          case "$BUILD" in
            success) BUILD_TXT="‚úÖ success" ;;
            failure) BUILD_TXT="‚ùå failure" ;;
            *)       BUILD_TXT="$BUILD" ;;
          esac
          case "$DEPLOY" in
            success) DEPLOY_TXT="üöÄ success" ;;
            failure) DEPLOY_TXT="‚ö†Ô∏è failure" ;;
            *)       DEPLOY_TXT="$DEPLOY" ;;
          esac

          # Embed Ëâ≤ÔºàDiscord „ÅØ 24bit intÔºâ
          # success=0x2ECC71(3066993), deploy fail=0xE67E22(15105570), build fail=0xE74C3C(15158332), skipped=0xFEE75C(16705372)
          if [ "$BUILD" = "failure" ]; then COLOR=15158332
          elif [ "$DEPLOY" = "failure" ]; then COLOR=15105570
          elif [ "$DEPLOY" = "skipped" ]; then COLOR=16705372
          else COLOR=3066993
          fi

          # „Çø„Ç§„Éà„É´Ôºàcommit/PR „Çø„Ç§„Éà„É´„ÇíË™¨Êòé„Å´Ôºâ
          SUBJECT="$HEAD_MSG"
          if [ "$EVENT_NAME" = "pull_request" ] && [ -n "${PR_TITLE:-}" ]; then SUBJECT="$PR_TITLE"; fi
          SUBJECT=${SUBJECT:-"Workflow summary"}
          SUBJECT=$(printf '%s' "$SUBJECT" | tr -d '\r' | head -n1 | cut -c1-120)
          SUBJECT_JSON=${SUBJECT//\\/\\\\}
          SUBJECT_JSON=${SUBJECT_JSON//\"/\\\"}

          BRANCH="$REF_NAME"
          if [ "$EVENT_NAME" = "pull_request" ] && [ -n "${HEAD_REF:-}" ]; then BRANCH="$HEAD_REF"; fi

          SHORT_SHA="${GITHUB_SHA::7}"
          RUN_URL="https://github.com/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}"
          COMMIT_URL="https://github.com/${GITHUB_REPOSITORY}/commit/${GITHUB_SHA}"
          REPO_URL="https://github.com/${GITHUB_REPOSITORY}"
          TITLE="Zola ‚Üí CF Pages ‚Ä¢ ${BRANCH} #${GITHUB_RUN_NUMBER}"
          NOW_UTC="$(date -u +%Y-%m-%dT%H:%M:%SZ)"

          # Embed + „Éú„Çø„É≥
          json=$(cat <<EOF
          {
            "username": "Zola CI",
            "avatar_url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png",
            "allowed_mentions": { "parse": [] },
            "embeds": [
              {
                "title": "${TITLE}",
                "url": "${RUN_URL}",
                "description": "${SUBJECT_JSON}",
                "color": ${COLOR},
                "timestamp": "${NOW_UTC}",
                "author": { "name": "${GITHUB_REPOSITORY}", "url": "${REPO_URL}" },
                "thumbnail": { "url": "https://github.githubassets.com/images/modules/logos_page/GitHub-Mark.png" },
                "fields": [
                  { "name": "Build",   "value": "${BUILD_TXT}",            "inline": true },
                  { "name": "Deploy",  "value": "${DEPLOY_TXT}",           "inline": true },
                  { "name": "Branch",  "value": "\`${BRANCH}\`",           "inline": true },
                  { "name": "Commit",  "value": "[\`${SHORT_SHA}\`](${COMMIT_URL})", "inline": true },
                  { "name": "Actor",   "value": "${GITHUB_ACTOR}",         "inline": true },
                  { "name": "Project", "value": "\`${CF_PAGES_PROJECT}\`", "inline": true }
                ],
                "footer": { "text": "Run #${GITHUB_RUN_NUMBER}" }
              }
            ],
            "components": [{
              "type": 1,
              "components": [
                { "type": 2, "style": 5, "label": "Open Run",   "url": "${RUN_URL}" },
                { "type": 2, "style": 5, "label": "View Commit","url": "${COMMIT_URL}" },
                { "type": 2, "style": 5, "label": "Repository", "url": "${REPO_URL}" }
              ]
            }]
          }
          EOF
          )

          curl -H 'Content-Type: application/json' -d "$json" "$DISCORD_WEBHOOK_URL"
